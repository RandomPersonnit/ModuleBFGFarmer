# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîì Not licensed.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: BFGFarmer
# Description: Send mes
# Author: @Tirandomperson
# Commands:
# .bbton | .bbtoff | .bfgon | .bfgoff
# ---------------------------------------------------------------------------------


# meta developer: @Tirandomperson

from asyncio import sleep

from .. import loader, utils


class BFGMod(loader.Module):
    """Send mes"""

    strigs = {"name": "BFGFarmer"}

    async def client_ready(self, client, db):
        self.db = db

    async def bbtoncmd(self, message):
        """ """
        await utils.answer(message, "<b>–ó–∞–ø—É—â–µ–Ω–æ</b>")
        status = self.db.set("BFGFarmer", "status1", True)
        while status:
            for i in range(15):
                if not self.db.get("BFGFarmer", "status1"):
                    return
                await message.respond("–°–æ–±–∏—Ä–∞—Ç—å —Å–Ω–µ–∂–∫–∏")
                await sleep(2)
            status = self.db.get("BFGFarmer", "status1")
            await message.respond("üöÄ–û—Ü–µ–Ω–∏–≤–∞—Ç—å")

    async def bbtoffcmd(self, message):
        """ """
        self.db.set("BFGMod", "status1", False)
        await utils.answer(message, "<b>–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>")

    async def bfgoncmd(self, message):
        """ """
        await utils.answer(message, "<b>–ó–∞–ø—É—â–µ–Ω–æ</b>")
        status = self.db.set("BFGFarmer", "status2", True)
        while status:
            await message.respond("–∫–æ–ø–∞—Ç—å –∏–∑—É–º—Ä—É–¥—ã")
            await sleep(60 * 5)
            status = self.db.get("BFGFarmer", "status2")
            if not status:
                return

    async def bfgoffcmd(self, message):
        """ """
        self.db.set("BFGFarmer", "status2", False)
        await utils.answer(message, "<b>–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>")
